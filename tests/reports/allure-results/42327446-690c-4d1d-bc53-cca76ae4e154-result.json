{"name": "test_create_gym_user", "status": "failed", "statusDetails": {"message": "AssertionError: Create gym user test failed: 409 Client Error: Conflict for url: http://localhost:8000/api/v1/gym/auth/register", "trace": "self = <test_gym_management.TestGymManagement testMethod=test_create_gym_user>\n\n    def test_create_gym_user(self):\n        \"\"\"Test registering a new gym user.\"\"\"\n        try:\n            user_data = self.test_data[\"create_gym_user\"][0]\n>           response = self.api.create_gym_user(user_data=user_data)\n\ntest_gym_management.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:775: in create_gym_user\n    resp = self.post(endpoint, json=user_data)\n..\\utils\\api_client.py:72: in post\n    return self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [409]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 409 Client Error: Conflict for url: http://localhost:8000/api/v1/gym/auth/register\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_gym_management.TestGymManagement testMethod=test_create_gym_user>\n\n    def test_create_gym_user(self):\n        \"\"\"Test registering a new gym user.\"\"\"\n        try:\n            user_data = self.test_data[\"create_gym_user\"][0]\n            response = self.api.create_gym_user(user_data=user_data)\n            self.assertIn(\"data\", response)\n            TestGymManagement.gym_user_id = response[\"data\"][\"id\"]\n        except Exception as e:\n>           self.fail(f\"Create gym user test failed: {e}\")\nE           AssertionError: Create gym user test failed: 409 Client Error: Conflict for url: http://localhost:8000/api/v1/gym/auth/register\n\ntest_gym_management.py:108: AssertionError"}, "description": "Test registering a new gym user.", "attachments": [{"name": "log", "source": "779414f5-dc12-4a86-bdb7-0bc8e7f0f4f6-attachment.txt", "type": "text/plain"}], "start": 1754320419309, "stop": 1754320419548, "uuid": "40591c4b-2fcb-49f4-bca5-e43d10ba1a03", "historyId": "cbcdd1be7559b52367ead9a617a78e0c", "testCaseId": "cbcdd1be7559b52367ead9a617a78e0c", "fullName": "tests.test_gym_management.TestGymManagement#test_create_gym_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "18564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}