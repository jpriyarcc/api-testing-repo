{"name": "test_get_gym_user_by_id", "status": "failed", "statusDetails": {"message": "Failed: Fetching gym user ID fixture failed: 503 Server Error: Service Unavailable for url: http://localhost:8000/api/v1/gym/user/me", "trace": "api = <tests.utils.api_helper1.ManagementUserAPIHandler object at 0x0000018513EF8400>\ngym_auth_tokens = {'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huLmRvZTJAZ3ltLmNvbSIsImlkIjoiOGM0YjQ1NTItY2U0Mi0...mNvbSIsImF1ZCI6Imh0dHBzOi8veW91cmFwcC5jb20vYXBpIiwidHlwZSI6InJlZnJlc2gifQ.RxqdwzdT7WVHC7lhrfvZzNNRTrwnLIneUHmgyQf5RVI'}\n\n    @pytest.fixture(scope=\"session\")\n    def gym_user_id(api, gym_auth_tokens):\n        \"\"\"\n        Fixture to get gym user ID for the logged-in gym user.\n        \"\"\"\n        try:\n            token = gym_auth_tokens[\"access_token\"]\n>           profile_resp = api.get_gym_user_profile(token=token)\n\nconftest.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\api_helper1.py:913: in get_gym_user_profile\n    resp = self.get(endpoint, token=token)\nutils\\api_client.py:87: in get\n    return self._handle_response(resp)\nutils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [503]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 503 Server Error: Service Unavailable for url: http://localhost:8000/api/v1/gym/user/me\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <tests.utils.api_helper1.ManagementUserAPIHandler object at 0x0000018513EF8400>\ngym_auth_tokens = {'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huLmRvZTJAZ3ltLmNvbSIsImlkIjoiOGM0YjQ1NTItY2U0Mi0...mNvbSIsImF1ZCI6Imh0dHBzOi8veW91cmFwcC5jb20vYXBpIiwidHlwZSI6InJlZnJlc2gifQ.RxqdwzdT7WVHC7lhrfvZzNNRTrwnLIneUHmgyQf5RVI'}\n\n    @pytest.fixture(scope=\"session\")\n    def gym_user_id(api, gym_auth_tokens):\n        \"\"\"\n        Fixture to get gym user ID for the logged-in gym user.\n        \"\"\"\n        try:\n            token = gym_auth_tokens[\"access_token\"]\n            profile_resp = api.get_gym_user_profile(token=token)\n            assert \"data\" in profile_resp, \"Failed to get gym user profile\"\n            user_id = profile_resp[\"data\"].get(\"id\")\n            assert user_id is not None, \"Gym user ID missing from profile\"\n            return user_id\n    \n        except Exception as e:\n            log.error(f\"Fetching gym user ID fixture failed: {e}\")\n>           pytest.fail(f\"Fetching gym user ID fixture failed: {e}\")\nE           Failed: Fetching gym user ID fixture failed: 503 Server Error: Service Unavailable for url: http://localhost:8000/api/v1/gym/user/me\n\nconftest.py:133: Failed"}, "description": "Test retrieving a gym user by their user ID.", "attachments": [{"name": "log", "source": "4934fc02-6307-4f5d-a402-06986cc04ede-attachment.txt", "type": "text/plain"}], "start": 1754397313559, "stop": 1754397313559, "uuid": "30ae36eb-973c-4fc8-85db-2ce96d16a1b1", "historyId": "1f80ee4859a46b2d5e24946da93fb222", "testCaseId": "1f80ee4859a46b2d5e24946da93fb222", "fullName": "tests.test_gym_management.TestGymManagement#test_get_gym_user_by_id", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "32080-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}