{"name": "test_update_user_by_id", "status": "failed", "statusDetails": {"message": "Failed: Login fixture setup failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/management/auth/login", "trace": "api = <utils.api_helper1.ManagementUserAPIHandler object at 0x0000014E9D284400>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    @pytest.fixture(scope=\"session\")\n    def auth_tokens(api, test_data):\n        \"\"\"\n        Fixture to log in once per test session and provide access and refresh tokens.\n        \"\"\"\n        try:\n            case = test_data[\"login\"][0]\n>           response = api.login(email=case[\"email\"], password=case[\"password\"])\n\nconftest.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:134: in login\n    resp = self.post(endpoint, json={\"email\": email, \"password\": password})\n..\\utils\\api_client.py:72: in post\n    self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/management/auth/login\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <utils.api_helper1.ManagementUserAPIHandler object at 0x0000014E9D284400>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    @pytest.fixture(scope=\"session\")\n    def auth_tokens(api, test_data):\n        \"\"\"\n        Fixture to log in once per test session and provide access and refresh tokens.\n        \"\"\"\n        try:\n            case = test_data[\"login\"][0]\n            response = api.login(email=case[\"email\"], password=case[\"password\"])\n            response_json = response.json()\n            assert \"data\" in response_json, \"Login response missing 'data' key\"\n    \n            access_token = response_json[\"data\"][\"access_token\"]\n            refresh_token = response_json[\"data\"][\"refresh_token\"]\n    \n            assert access_token, \"Access token missing\"\n            assert refresh_token, \"Refresh token missing\"\n    \n            return {\n                \"access_token\": access_token,\n                \"refresh_token\": refresh_token\n            }\n    \n        except Exception as e:\n            log.error(f\"Login fixture setup failed: {e}\")\n>           pytest.fail(f\"Login fixture setup failed: {e}\")\nE           Failed: Login fixture setup failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/management/auth/login\n\nconftest.py:54: Failed"}, "description": "Test updating a user's profile details by user ID.", "attachments": [{"name": "log", "source": "69d9d87a-1053-4fdd-a9bb-b6b981a53d7f-attachment.txt", "type": "text/plain"}], "start": 1754389142496, "stop": 1754389142496, "uuid": "2955f026-8948-4f43-9c43-d2579e92cafe", "historyId": "0e60270e0e358ea86b1fe1ccc85ea275", "testCaseId": "0e60270e0e358ea86b1fe1ccc85ea275", "fullName": "tests.test_management_user.TestManagementUserAuth#test_update_user_by_id", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_management_user"}, {"name": "subSuite", "value": "TestManagementUserAuth"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "19960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_management_user"}], "titlePath": ["tests", "test_management_user.py", "TestManagementUserAuth"]}