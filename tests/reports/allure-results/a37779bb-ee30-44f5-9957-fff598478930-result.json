{"name": "test_login_gym_user", "status": "failed", "statusDetails": {"message": "Failed: Gym login fixture setup failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/gym/auth/login", "trace": "api = <tests.utils.api_helper1.ManagementUserAPIHandler object at 0x000001E66891D4B0>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    @pytest.fixture(scope=\"session\")\n    def gym_auth_tokens(api, test_data):\n        \"\"\"\n        Fixture to log in as an existing gym user once per test session,\n        returning gym access and refresh tokens.\n        \"\"\"\n        try:\n            login_data = test_data[\"login_gym_user\"][0]\n>           response = api.login_gym_user(email=login_data[\"email\"], password=login_data[\"password\"])\n\nconftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\api_helper1.py:858: in login_gym_user\n    resp = self.post(endpoint, json={\"email\": email, \"password\": password})\nutils\\api_client.py:72: in post\n    self._handle_response(resp)\nutils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/gym/auth/login\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <tests.utils.api_helper1.ManagementUserAPIHandler object at 0x000001E66891D4B0>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    @pytest.fixture(scope=\"session\")\n    def gym_auth_tokens(api, test_data):\n        \"\"\"\n        Fixture to log in as an existing gym user once per test session,\n        returning gym access and refresh tokens.\n        \"\"\"\n        try:\n            login_data = test_data[\"login_gym_user\"][0]\n            response = api.login_gym_user(email=login_data[\"email\"], password=login_data[\"password\"])\n            assert \"data\" in response, \"Login response missing 'data' key\"\n    \n            access_token = response[\"data\"][\"access_token\"]\n            refresh_token = response[\"data\"][\"refresh_token\"]\n    \n            assert access_token, \"Gym access token missing\"\n            assert refresh_token, \"Gym refresh token missing\"\n    \n            return {\n                \"access_token\": access_token,\n                \"refresh_token\": refresh_token\n            }\n    \n        except Exception as e:\n            log.error(f\"Gym login fixture setup failed: {e}\")\n>           pytest.fail(f\"Gym login fixture setup failed: {e}\")\nE           Failed: Gym login fixture setup failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/gym/auth/login\n\nconftest.py:115: Failed"}, "description": "Test gym user login and validate received tokens.", "attachments": [{"name": "log", "source": "751584cc-71d4-430a-b4de-f4ca697c3d8b-attachment.txt", "type": "text/plain"}], "start": 1754396342801, "stop": 1754396342801, "uuid": "cc9c2bd4-c5a0-4719-bac7-d669a9d70cbd", "historyId": "d3e9af4924d013c07e9b96a95da6602a", "testCaseId": "d3e9af4924d013c07e9b96a95da6602a", "fullName": "tests.test_gym_management.TestGymManagement#test_login_gym_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "35104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}