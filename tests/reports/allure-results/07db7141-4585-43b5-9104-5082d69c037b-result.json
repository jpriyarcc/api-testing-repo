{"name": "test_refresh_gym_token", "status": "broken", "statusDetails": {"message": "Exception: SetupClass login or profile fetch failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/gym/auth/login", "trace": "cls = <class 'test_gym_management.TestGymManagement'>\n\n    @classmethod\n    def setUpClass(cls):\n        cls.api = ManagementUserAPIHandler(base_url=\"http://localhost:8000\")\n    \n        json_path = os.path.join(os.path.dirname(__file__), '../utils/test_data1.json')\n        with open(json_path, \"r\") as file:\n            cls.test_data = json.load(file)\n    \n        cls.access_token = getattr(TestManagementUserAuth, 'access_token', None)\n    \n        cls.gym_id = None\n        cls.gym_user_id = None\n        cls.gym_user_access_token = None\n        cls.gym_user_refresh_token = None\n        cls.role_id = None\n    \n        # Login once to get gym user tokens and user ID\n        try:\n            login_data = cls.test_data[\"login_gym_user\"][0]\n>           response = cls.api.login_gym_user(email=login_data[\"email\"], password=login_data[\"password\"])\n\ntest_gym_management.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:858: in login_gym_user\n    resp = self.post(endpoint, json={\"email\": email, \"password\": password})\n..\\utils\\api_client.py:72: in post\n    self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/gym/auth/login\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\ncls = <class 'test_gym_management.TestGymManagement'>\n\n    @classmethod\n    def setUpClass(cls):\n        cls.api = ManagementUserAPIHandler(base_url=\"http://localhost:8000\")\n    \n        json_path = os.path.join(os.path.dirname(__file__), '../utils/test_data1.json')\n        with open(json_path, \"r\") as file:\n            cls.test_data = json.load(file)\n    \n        cls.access_token = getattr(TestManagementUserAuth, 'access_token', None)\n    \n        cls.gym_id = None\n        cls.gym_user_id = None\n        cls.gym_user_access_token = None\n        cls.gym_user_refresh_token = None\n        cls.role_id = None\n    \n        # Login once to get gym user tokens and user ID\n        try:\n            login_data = cls.test_data[\"login_gym_user\"][0]\n            response = cls.api.login_gym_user(email=login_data[\"email\"], password=login_data[\"password\"])\n            cls.gym_user_access_token = response[\"data\"][\"access_token\"]\n            cls.gym_user_refresh_token = response[\"data\"][\"refresh_token\"]\n    \n            profile_response = cls.api.get_gym_user_profile(token=cls.gym_user_access_token)\n            cls.gym_user_id = profile_response[\"data\"][\"id\"]\n    \n        except Exception as e:\n>           raise Exception(f\"SetupClass login or profile fetch failed: {e}\")\nE           Exception: SetupClass login or profile fetch failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/gym/auth/login\n\ntest_gym_management.py:39: Exception"}, "description": "Test refreshing access token using refresh token.", "attachments": [{"name": "log", "source": "b8a9c701-c28c-4542-893e-6732a53b45b8-attachment.txt", "type": "text/plain"}], "start": 1754370322416, "stop": 1754370322416, "uuid": "e5adfc9b-1fb8-426b-ac3c-c9b8d9828764", "historyId": "1fd11e7972e06a5dd9750873bd17bdb1", "testCaseId": "1fd11e7972e06a5dd9750873bd17bdb1", "fullName": "tests.test_gym_management.TestGymManagement#test_refresh_gym_token", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "30944-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}