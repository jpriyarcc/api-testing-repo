{"name": "test_create_gym_user", "status": "failed", "statusDetails": {"message": "Failed: Create gym user test failed: 422 Client Error: Unprocessable Entity for url: http://localhost:8000/api/v1/gym/auth/register", "trace": "self = <test_gym_management.TestGymManagement object at 0x0000011D04EB7580>\napi = <tests.utils.api_helper1.ManagementUserAPIHandler object at 0x0000011D04F3FA60>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    def test_create_gym_user(self, api, test_data):\n        \"\"\"Test creating a new gym user.\"\"\"\n        try:\n            user_data = test_data[\"create_gym_user\"][0]\n>           resp = api.create_gym_user(user_data=user_data)\n\ntest_gym_management.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\api_helper1.py:775: in create_gym_user\n    resp = self.post(endpoint, json=user_data)\nutils\\api_client.py:72: in post\n    self._handle_response(resp)\nutils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [422]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 422 Client Error: Unprocessable Entity for url: http://localhost:8000/api/v1/gym/auth/register\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_gym_management.TestGymManagement object at 0x0000011D04EB7580>\napi = <tests.utils.api_helper1.ManagementUserAPIHandler object at 0x0000011D04F3FA60>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    def test_create_gym_user(self, api, test_data):\n        \"\"\"Test creating a new gym user.\"\"\"\n        try:\n            user_data = test_data[\"create_gym_user\"][0]\n            resp = api.create_gym_user(user_data=user_data)\n            assert resp.status_code == 201\n            resp_json = resp.json()\n            assert \"message\" in resp_json\n            assert \"success\" in resp_json[\"message\"].lower()\n        except Exception as e:\n>           pytest.fail(f\"Create gym user test failed: {e}\")\nE           Failed: Create gym user test failed: 422 Client Error: Unprocessable Entity for url: http://localhost:8000/api/v1/gym/auth/register\n\ntest_gym_management.py:165: Failed"}, "description": "Test creating a new gym user.", "attachments": [{"name": "log", "source": "9b3afe0b-875b-4075-b486-0759afa92bc2-attachment.txt", "type": "text/plain"}], "start": 1754395376459, "stop": 1754395376877, "uuid": "35af0aaa-75cf-458d-ad6b-b98b478052bb", "historyId": "cbcdd1be7559b52367ead9a617a78e0c", "testCaseId": "cbcdd1be7559b52367ead9a617a78e0c", "fullName": "tests.test_gym_management.TestGymManagement#test_create_gym_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "21528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}