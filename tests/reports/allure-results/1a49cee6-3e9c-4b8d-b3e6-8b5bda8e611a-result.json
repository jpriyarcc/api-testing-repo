{"name": "test_resend_verification_email", "status": "failed", "statusDetails": {"message": "AssertionError: Resend verification email test failed: 400 Client Error: Bad Request for url: http://localhost:8000/api/v1/gym/auth/resend-verification", "trace": "self = <test_gym_management.TestGymManagement testMethod=test_resend_verification_email>\n\n    def test_resend_verification_email(self):\n        \"\"\"Test resending email verification.\"\"\"\n        try:\n            email = self.test_data[\"resend_verification_email\"][0][\"email\"]\n>           response = self.api.resend_verification_email(email=email)\n\ntest_gym_management.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:805: in resend_verification_email\n    resp = self.post(endpoint, json=payload)\n..\\utils\\api_client.py:72: in post\n    self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:8000/api/v1/gym/auth/resend-verification\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_gym_management.TestGymManagement testMethod=test_resend_verification_email>\n\n    def test_resend_verification_email(self):\n        \"\"\"Test resending email verification.\"\"\"\n        try:\n            email = self.test_data[\"resend_verification_email\"][0][\"email\"]\n            response = self.api.resend_verification_email(email=email)\n            self.assertIsNone(response)\n        except Exception as e:\n>           self.fail(f\"Resend verification email test failed: {e}\")\nE           AssertionError: Resend verification email test failed: 400 Client Error: Bad Request for url: http://localhost:8000/api/v1/gym/auth/resend-verification\n\ntest_gym_management.py:130: AssertionError"}, "description": "Test resending email verification.", "attachments": [{"name": "log", "source": "6d77ddba-c0ba-4956-8fc5-868dc0233209-attachment.txt", "type": "text/plain"}], "start": 1754368053385, "stop": 1754368076474, "uuid": "2bb176f6-f01f-4cf6-892c-08664c5aacc8", "historyId": "3b1ccd8a5d84d4bd32af631c982bba7e", "testCaseId": "3b1ccd8a5d84d4bd32af631c982bba7e", "fullName": "tests.test_gym_management.TestGymManagement#test_resend_verification_email", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "15636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}