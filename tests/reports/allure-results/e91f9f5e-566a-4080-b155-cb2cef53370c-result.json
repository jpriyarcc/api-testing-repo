{"name": "test_logout_user", "status": "failed", "statusDetails": {"message": "Failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/management/auth/logout", "trace": "self = <test_management_user.TestManagementUserAuth object at 0x000002658C2ABF40>\napi = <utils.api_helper1.ManagementUserAPIHandler object at 0x000002658C318400>\n\n    def test_logout_user(self, api):\n        \"\"\"Test logging out the currently authenticated user.\"\"\"\n        try:\n>           response = api.logout_user(token=shared_data.access_token)\n\ntest_management_user.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:174: in logout_user\n    resp = self.get(endpoint, token=token)\n..\\utils\\api_client.py:87: in get\n    return self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/management/auth/logout\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_management_user.TestManagementUserAuth object at 0x000002658C2ABF40>\napi = <utils.api_helper1.ManagementUserAPIHandler object at 0x000002658C318400>\n\n    def test_logout_user(self, api):\n        \"\"\"Test logging out the currently authenticated user.\"\"\"\n        try:\n            response = api.logout_user(token=shared_data.access_token)\n            assert \"message\" in response\n        except Exception as e:\n            log.error(f\"Logout user test failed: {e}\")\n>           pytest.fail(str(e))\nE           Failed: 401 Client Error: Unauthorized for url: http://localhost:8000/api/v1/management/auth/logout\n\ntest_management_user.py:123: Failed"}, "description": "Test logging out the currently authenticated user.", "attachments": [{"name": "log", "source": "da4388f9-ca9c-4e09-88b7-3810f49ced52-attachment.txt", "type": "text/plain"}], "start": 1754386597323, "stop": 1754386597384, "uuid": "40bd6213-6854-44cd-9d0c-262a2d54847d", "historyId": "247e33c6520a2678d183697ac3237124", "testCaseId": "247e33c6520a2678d183697ac3237124", "fullName": "tests.test_management_user.TestManagementUserAuth#test_logout_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_management_user"}, {"name": "subSuite", "value": "TestManagementUserAuth"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "32048-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_management_user"}], "titlePath": ["tests", "test_management_user.py", "TestManagementUserAuth"]}