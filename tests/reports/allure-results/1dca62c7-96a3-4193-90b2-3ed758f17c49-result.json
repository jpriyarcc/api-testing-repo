{"name": "test_login", "status": "failed", "statusDetails": {"message": "Failed: Fixture setup failed: 409 Client Error: Conflict for url: http://localhost:8000/api/v1/management/auth/register", "trace": "api = <utils.api_helper1.ManagementUserAPIHandler object at 0x000001B6E3F4EB30>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    @pytest.fixture(scope=\"session\")\n    def registered_user(api, test_data):\n        \"\"\"Register, verify, login and return tokens + user info.\"\"\"\n        try:\n            # Register\n            reg = test_data[\"register_user\"][0]\n>           api.register_user(ManagementUserCreate(email=reg[\"email\"], password=reg[\"password\"]))\n\nconftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:36: in register_user\n    return self.post(endpoint, json=payload)\n..\\utils\\api_client.py:72: in post\n    self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [409]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 409 Client Error: Conflict for url: http://localhost:8000/api/v1/management/auth/register\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <utils.api_helper1.ManagementUserAPIHandler object at 0x000001B6E3F4EB30>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    @pytest.fixture(scope=\"session\")\n    def registered_user(api, test_data):\n        \"\"\"Register, verify, login and return tokens + user info.\"\"\"\n        try:\n            # Register\n            reg = test_data[\"register_user\"][0]\n            api.register_user(ManagementUserCreate(email=reg[\"email\"], password=reg[\"password\"]))\n    \n            # Verify\n            token = test_data[\"verify_email\"][0][\"token\"]\n            api.verify_email(token=token)\n    \n            # Login\n            login = test_data[\"login\"][0]\n            login_resp = api.login(email=login[\"email\"], password=login[\"password\"])\n            access_token = login_resp[\"data\"][\"access_token\"]\n            refresh_token = login_resp[\"data\"][\"refresh_token\"]\n    \n            # Get user info\n            user_info = api.get_current_user(token=access_token)\n            user_id = user_info[\"data\"][\"user_id\"]\n    \n            return {\n                \"email\": login[\"email\"],\n                \"access_token\": access_token,\n                \"refresh_token\": refresh_token,\n                \"user_id\": user_id\n            }\n    \n        except Exception as e:\n>           pytest.fail(f\"Fixture setup failed: {e}\")\nE           Failed: Fixture setup failed: 409 Client Error: Conflict for url: http://localhost:8000/api/v1/management/auth/register\n\nconftest.py:57: Failed"}, "description": "Test logging in with valid credentials and retrieving tokens.", "attachments": [{"name": "log", "source": "dbd7a3b6-6641-4a1b-8c0a-00d01bfb13f0-attachment.txt", "type": "text/plain"}], "start": 1754384590959, "stop": 1754384590959, "uuid": "6750d8b8-ca63-41e8-85a0-f39d99659d08", "historyId": "ba22913fd18a2c45b90f9e6f5729f2bd", "testCaseId": "ba22913fd18a2c45b90f9e6f5729f2bd", "fullName": "tests.test_management_user.TestManagementUserAuth#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_management_user"}, {"name": "subSuite", "value": "TestManagementUserAuth"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "22356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_management_user"}], "titlePath": ["tests", "test_management_user.py", "TestManagementUserAuth"]}