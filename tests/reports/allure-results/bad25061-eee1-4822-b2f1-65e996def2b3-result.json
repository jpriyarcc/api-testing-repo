{"name": "test_register_user", "status": "failed", "statusDetails": {"message": "Failed: assert False\n +  where False = isinstance(<Response [201]>, dict)", "trace": "self = <test_management_user.TestManagementUserAuth object at 0x000001B93B35FA60>\napi = <utils.api_helper1.ManagementUserAPIHandler object at 0x000001B93B35D2D0>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    def test_register_user(self, api, test_data):\n        \"\"\"Test registering a new management user.\"\"\"\n        try:\n            case = test_data[\"register_user\"][0]\n            user = ManagementUserCreate(email=case[\"email\"], password=case[\"password\"])\n            response = api.register_user(user)\n>           assert isinstance(response, dict)\nE           assert False\nE            +  where False = isinstance(<Response [201]>, dict)\n\ntest_management_user.py:18: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_management_user.TestManagementUserAuth object at 0x000001B93B35FA60>\napi = <utils.api_helper1.ManagementUserAPIHandler object at 0x000001B93B35D2D0>\ntest_data = {'assign_gym_user_role': [{'expected_status': 201, 'role_id': '123e4567-e89b-12d3-a456-426614174001', 'user_id': '123e...ssword': 'SecurePass123'}}, {'expected_status': 422, 'user_data': {'email': 'invalidemail', 'password': 'pass'}}], ...}\n\n    def test_register_user(self, api, test_data):\n        \"\"\"Test registering a new management user.\"\"\"\n        try:\n            case = test_data[\"register_user\"][0]\n            user = ManagementUserCreate(email=case[\"email\"], password=case[\"password\"])\n            response = api.register_user(user)\n            assert isinstance(response, dict)\n    \n            if case[\"expected_status\"] == 201:\n                assert \"data\" in response\n                assert response[\"data\"][\"email\"] == case[\"email\"]\n            else:\n                assert response.get(\"error_code\") == case[\"expected_error_code\"]\n        except Exception as e:\n            log.error(f\"Register user test failed: {e}\")\n>           pytest.fail(str(e))\nE           Failed: assert False\nE            +  where False = isinstance(<Response [201]>, dict)\n\ntest_management_user.py:27: Failed"}, "description": "Test registering a new management user.", "attachments": [{"name": "log", "source": "76f57598-f44b-497d-ac59-6b404412ac3b-attachment.txt", "type": "text/plain"}], "start": 1754381144827, "stop": 1754381286905, "uuid": "f8f93853-da2a-44f6-ad61-c20024f599da", "historyId": "7ea7e4761214987cb26c9d21201f9b0b", "testCaseId": "7ea7e4761214987cb26c9d21201f9b0b", "fullName": "tests.test_management_user.TestManagementUserAuth#test_register_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_management_user"}, {"name": "subSuite", "value": "TestManagementUserAuth"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "20496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_management_user"}], "titlePath": ["tests", "test_management_user.py", "TestManagementUserAuth"]}