{"name": "test_request_password_reset", "status": "failed", "statusDetails": {"message": "AssertionError: Request password reset test failed: 404 Client Error: Not Found for url: http://localhost:8000/api/v1/gym/auth/forgot-password", "trace": "self = <test_gym_management.TestGymManagement testMethod=test_request_password_reset>\n\n    def test_request_password_reset(self):\n        \"\"\"Test requesting a password reset for a gym user.\"\"\"\n        try:\n            email = self.test_data[\"request_password_reset\"][0][\"email\"]\n>           response = self.api.request_password_reset(email=email)\n\ntest_gym_management.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\api_helper1.py:820: in request_password_reset\n    resp = self.post(endpoint, json=payload)\n..\\utils\\api_client.py:72: in post\n    self._handle_response(resp)\n..\\utils\\api_client.py:47: in _handle_response\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/api/v1/gym/auth/forgot-password\n\n..\\.venv\\lib\\site-packages\\requests\\models.py:1026: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_gym_management.TestGymManagement testMethod=test_request_password_reset>\n\n    def test_request_password_reset(self):\n        \"\"\"Test requesting a password reset for a gym user.\"\"\"\n        try:\n            email = self.test_data[\"request_password_reset\"][0][\"email\"]\n            response = self.api.request_password_reset(email=email)\n            self.assertIn(\"message\", response)\n        except Exception as e:\n>           self.fail(f\"Request password reset test failed: {e}\")\nE           AssertionError: Request password reset test failed: 404 Client Error: Not Found for url: http://localhost:8000/api/v1/gym/auth/forgot-password\n\ntest_gym_management.py:132: AssertionError"}, "description": "Test requesting a password reset for a gym user.", "attachments": [{"name": "log", "source": "931a85ce-6d38-4b20-a532-020c1c9a7dcf-attachment.txt", "type": "text/plain"}], "start": 1754322655518, "stop": 1754322655640, "uuid": "02d64182-cea4-4608-963d-a855dc73b4d6", "historyId": "96de2ec787beea591861ef4c9cd3c626", "testCaseId": "96de2ec787beea591861ef4c9cd3c626", "fullName": "tests.test_gym_management.TestGymManagement#test_request_password_reset", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_gym_management"}, {"name": "subSuite", "value": "TestGymManagement"}, {"name": "host", "value": "mirrajo"}, {"name": "thread", "value": "12756-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_gym_management"}], "titlePath": ["tests", "test_gym_management.py", "TestGymManagement"]}